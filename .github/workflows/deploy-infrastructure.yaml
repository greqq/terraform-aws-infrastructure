name: Deploy Infrastructure

on:
  pull_request:
    types:
      - opened
      - synchronize

env:
  AWS_REGION: ${{ secrets.AWS_SSO_REGION }}
permissions:
  id-token: write
  contents: read

jobs:
  DeployInfrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Run AWS CLI Command
        run: |
          aws s3 ls
          echo ${{ secrets.AWS_ROLE }}

      - name: Copy terraform.tfvars from S3 to production folder
        run: |
          aws s3 cp s3://terraform-config-cloud-resume/terraform.tfvars ./environments/production/
          aws s3 cp s3://terraform-config-cloud-resume/backend.conf ./environments/production/

      - uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        working-directory: ./environments/production
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=backend.conf
        working-directory: ./environments/production

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./environments/production

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        working-directory: ./environments/production
        continue-on-error: true

      - name: Terraform Apply
        if: github.event_name == 'pull_request' && github.event.action == 'synchronize' && github.event.pull_request.base.ref == 'main'
        run: terraform apply -no-color tfplan
        working-directory: ./environments/production
        continue-on-error: true
